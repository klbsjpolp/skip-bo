@import 'tailwindcss';
@import "./themes/light.css";
@import "./themes/dark.css";
@import "./themes/glass.css";
@import "./themes/neon.css";
@import "./themes/rainbow.css";
@import "./themes/wool.css";
@import "./themes/metro.css";
@import "./themes/retro.css" layer(components);
@import "./themes/pastel.css";
@import "./themes/minecraft.css";

@plugin 'tailwindcss-animate';

@custom-variant dark (&:is(.dark *));

@theme {
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-background: var(--background);
  --color-foreground: var(--foreground);

  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);

  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);

  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);

  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);

  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);

  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);

  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);

  --animate-accordion-down: accordion-down 0.2s ease-out;
  --animate-accordion-up: accordion-up 0.2s ease-out;
}

/*
  The default border color has changed to `currentcolor` in Tailwind CSS v4,
  so we've added these compatibility styles to make sure everything still
  looks the same as it did with Tailwind CSS v3.

  If we ever want to remove these styles, we need to add an explicit border
  color utility to any element that depends on these defaults.
*/
@layer base {
  *,
  ::after,
  ::before,
  ::backdrop,
  ::file-selector-button {
    border-color: var(--color-gray-200, currentcolor);
  }

  :root {
    --background: hsl(0 0% 100%);
    --foreground: hsl(0 0% 3.9%);

    --card: hsl(0 0% 100%);
    --card-foreground: hsl(0 0% 3.9%);

    --muted: hsl(0 0% 96.1%);
    --muted-foreground: hsl(0 0% 45.1%);
    --accent: hsl(0 0% 96.1%);
    --accent-foreground: hsl(0 0% 9%);
    --popover: hsl(0 0% 100%);
    --popover-foreground: hsl(0 0% 3.9%);
    --destructive: hsl(0 84.2% 60.2%);
    --destructive-foreground: hsl(0 0% 98%);
    --border: hsl(0 0% 89.8%);
    --input: hsl(0 0% 89.8%);
    --ring: hsl(0 0% 3.9%);

    --radius: 0.5rem;
    --stripes-bg: none;

    --card-width: 46px;
    --card-height: 66px;
    --stack-diff: 16px;
    --active-turn-color: var(--primary);
    --card-front-color: white;
    --skipbo-bg: var(--card-front-color);
    --selected-border-color: #f59e0b;
    --drop-indicator-color: var(--selected-border-color);
    --selected-shadow: 0 0 20px var(--selected-border-color);
    --can-drop-shadow: 0 0 15px var(--selected-border-color);

    --card-g1: #0F0; /* 1‑4 */
    --card-g2: #F00; /* 5‑8 */
    --card-g3: #F0F; /* 9‑12 */

    --button-hover-bg: color-mix(in srgb, var(--button-bg) 100%, black 5%);
  }

  body {
    padding: env(safe-area-inset-top) env(safe-area-inset-right) env(safe-area-inset-bottom) env(safe-area-inset-left);
  }
  #main {
    padding-top: 10px;
  }

  @media(width >= 64rem) {
    :root {
      --card-width: 70px;
      --card-height: 100px;
      --stack-diff: 20px;
    }
  }

  /* Discard pile stack positioning */
  .discard-pile-stack {
    position: relative;
    width: var(--card-width);
  }

  .discard-pile-stack .card,
  .discard-pile-stack .placeholder {
    position: absolute;
    left: 0;
    top: 0;
    box-shadow: var(--card-shadow);
  }

  /* Consistent hover effects for all selectable cards */
  .hoverable-card:hover {
    --card-translate-y: -2px;
    --card-scale: 1.05;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    transition: all 0.2s ease-in-out;
  }

  /* Card Animation Styles */
  .card-animation-layer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;
    z-index: 1000;
  }

  /* Animation type specific styles */
  .animation-play {
    /* Cards moving to build piles */
    filter: brightness(1.1);
  }

  .animation-discard {
    /* Cards moving to discard piles */
    filter: saturate(0.8);
  }

  .animation-draw {
    /* Cards moving from deck to hand */
    filter: brightness(1.05);
  }

  @keyframes neonShift {
    0%   { background-position: 0 50%; }
    50%  { background-position: 100% 50%; }
    100% { background-position: 0 50%; }
  }

  @keyframes neonDrift {
    0%   { background-position: 0 50%; }
    100% { background-position: 200% 50%; }
  }

  @keyframes clouds-drift {
    from {
      background-position: 0 0;
    }
    to {
      background-position: -2000px 0;
    }
  }

  .hand,
  .discard-piles,
  .build-piles {
    display: flex;
    flex-wrap: nowrap;
    gap: calc(var(--card-width) / 7);
    justify-content: center;
  }


  .discard-piles {
    @apply card-height;
    flex-wrap: nowrap;
  }

  .hand-area {
    --hand-area-width: calc(var(--card-width) * (4 + 3 * 1/7)); /* 4 cards + gaps */
    width: var(--hand-area-width);
    height: var(--card-height); /* 1 card */

    &:not(.overlap-hand) {
      display: flex;
      gap: 10px;
      justify-content: center;
    }

    &.overlap-hand {
      position: relative;
      /* Remove flexbox properties that conflict with absolute positioning */
      .card {
        position: absolute;
        top: 0;
        /* Left positioning is handled by inline styles from Card component */
        transition: all 0.2s ease-in-out;

        &.selected {
          z-index: 101 !important;
          --card-translate-y: -8px;

          &.hoverable-card:hover {
            z-index: 999;
            --card-translate-y: -10px;
          }
        }

        &.hoverable-card:hover {
          z-index: 999;
          --card-translate-y: -8px;
          --card-scale: 1.08;
        }
      }
    }

    &:not(.overlap-hand) {
      display: flex;
      gap: 10px;
      justify-content: center;
    }
  }

  .player-area,
  .center-area {
    @apply ring-transparent relative lg:p-5 p-3 rounded-lg lg:mb-5 mb-3 bg-(--zone-bg-color) isolate;
    border: 2px solid transparent;

    .bg-layer {
      @apply absolute w-full h-full top-0 left-0 overflow-hidden pointer-events-none;
    }
  }

  .player-area {
    @apply z-20;
    transition: border-color 0.6s, background-color 0.6s, box-shadow 0.6s;

    &:first-child {
      margin-top: 15px;
    }
  }

  .center-area {
    @apply z-10;
  }

  .player-area.active-turn,
  .center-area.active-turn {
    @apply ring-(--active-turn-color);
  }

  .discard-pile-stack {
    width: var(--card-width);
  }

  @media (max-width: 640px) {
    .player-area .discard-piles {
      width: 100%;
      margin-top: 20px;
    }
  }

  /* Keyframes for the glass theme ambience */
  @keyframes glassFlow {
    /* layer1,            layer2,           layer3,           layer4 (subtile drift) */
    0% {
      background-position:
          0 0,
          100% 0,
          0 100%,
          50% 50%;
    }
    20% {
      background-position:
          80% -20%,     /* avance fort → et monte */
          20% 30%,      /* revient vers ← et descend */
          -20% 60%,     /* dépasse en négatif pour parallax */
          52% 48%;      /* léger drift */
    }
    40% {
      background-position:
          -30% 90%,     /* inversion direction (←↓) */
          120% -10%,    /* overshoot (→↑) */
          70% -20%,     /* traverse l’axe Y en négatif */
          48% 52%;
    }
    60% {
      background-position:
          110% 10%,     /* rebond (→↓) */
          -20% 80%,     /* (←↓) plus lent */
          30% 120%,     /* dépasse en bas (↓) */
          51% 49%;
    }
    80% {
      background-position:
          -10% -30%,    /* (←↑) */
          140% 50%,     /* overshoot fort vers → */
          -40% 30%,     /* grand retour ← */
          49% 51%;
    }
    100% {
      background-position:
          120% 80%,     /* termine loin (→↓) */
          -40% 40%,     /* termine à gauche */
          90% -30%,     /* termine en haut à droite */
          50% 50%;
    }
  }

  @keyframes glassSheen {
    0%   { transform: translateX(-160%) translateY(-2%) rotate(0.001deg); }
    50%  { transform: translateX(20%) translateY(2%) rotate(0.001deg); }
    100% { transform: translateX(160%) translateY(-1%) rotate(0.001deg); }
  }

  body {
    font-family: 'Inter', sans-serif;
    background-color: var(--bg-color);
    color: var(--text-color);
  }

  h1 {
    @apply text-center font-bold text-lg lg:text-xl text-(--title-color);
  }

  h3 {
    @apply font-bold text-sm lg:text-lg text-(--title-color);
  }

  * {
    @apply border-border;
  }
}

@utility container {
  margin-inline: auto;
  padding-inline: 2rem;
  @media (min-width: 640px) {
    max-width: none;
  }
  @media (min-width: 1400px) {
    max-width: 1400px;
  }
}

@utility card-height {
  height: var(--card-height);
}

@utility card {
  @apply text-center leading-none flex items-center justify-center font-bold cursor-pointer card-height
  lg:not-[.skipbo-text]:text-2xl not-[.skipbo-text]:text-xl text-shadow-sm shadow-(--card-shadow)
  text-(--card-color) bg-(--card-front-color) rounded-(--card-radius) w-(--card-width) border-[1px] border-(--card-border-color)
  select-none will-change-auto before:will-change-auto after:will-change-auto;
  transform-origin: bottom center;
  --card-rotate: inherit;
  --card-translate-y: 0px;
  --card-scale: 1;
  transform: translate3d(0,var(--card-translate-y),0) scale(var(--card-scale)) rotate(var(--card-rotate));

  .back {
    @apply relative w-full h-full bg-cover bg-(--card-back-color) rounded-[inherit];
    * {
      @apply text-4xl;
    }
  }

  .card-inner {
    @apply w-full h-full rounded-[inherit] overflow-hidden flex items-center justify-center absolute will-change-transform;

    & > * {
      @apply relative z-[1] will-change-transform;
    }
  }

  &.selected {
    @apply border-(--selected-border-color) shadow-(--selected-shadow);
    --card-translate-y: -5px;
  }
}

@utility animated-card {
  @apply shadow-2xl fixed pointer-events-none will-change-auto;
}

@utility card-range-1 {
  color: var(--card-g1);
}

@utility card-range-2 {
  color: var(--card-g2);
}

@utility card-range-3 {
  color: var(--card-g3);
}

@utility skipbo-text {
  @apply text-(--skipbo-text) bg-(--skipbo-bg) text-base lg:text-2xl;
}

@utility card-back {
  background-color: var(--card-back-color);
}

@utility placeholder {
  @apply cursor-pointer w-(--card-width) h-(--card-height) rounded-(--card-radius) text-(--card-border-color)
    flex items-center justify-center border-[2px_dashed_var(--card-border-color)];
}

@utility card-corner-number {
  @apply absolute top-0.5 lg:top-1 left-1 lg:left-1.5 text-xs font-bold invisible lg:visible;
}

.discard-pile-stack .card:not(:last-child) .card-corner-number {
  @apply visible;
}

@utility vertical-text {
  @apply transform rotate-180;
  writing-mode: vertical-rl;
}

@utility drop-indicator {
  @apply relative rounded-(--card-radius);
  transition: all 0.2s ease-in-out;

  &.can-drop:hover {
    @apply cursor-pointer -translate-y-0.5 shadow-(--can-drop-shadow);

    &::after {
      @apply content-['↓'] absolute top-[-25px] left-1/2 text-lg -translate-x-1/2
        text-(--drop-indicator-color) font-bold z-20 animate-bounce;
    }

    &::before {
      @apply content-[''] absolute z-10 opacity-80 -inset-0.5 animate-pulse rounded-[calc(var(--card-radius)+2px)]
        border-(--drop-indicator-color) border-dashed border-2;
    }
  }
}

@utility drop-target-hover {
  @apply relative ;

  /* Drop target indicator should only show on hover */
  &:hover::before {
    content: '';
    position: absolute;
    top: -3px;
    left: 0;
    right: 0;
    height: 3px;
    background-color: var(--selected-border-color);
    border-radius: 2px;
    opacity: 0.8;
    z-index: 10;
  }
}

@utility card-morph-wrapper {
  @apply relative card-height w-(--card-width);
}

@utility card-morph-layer {
  @apply absolute pointer-events-none transition-opacity duration-800;
}

button {
  @apply bg-(--button-bg) text-(--button-text) hover:bg-(--button-hover-bg) border-2 rounded-md;
}
